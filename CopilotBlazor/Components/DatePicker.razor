@using NodaTime.Text
@using System.Linq.Expressions


@inherits InputBase<LocalDate>

@* <input class="form-control" type="date" @bind="BindValue" /> *@
<SfDatePicker @bind-Value=@BindValue TValue="DateTime?" Placeholder="Choose a Date" CssClass="@ValidationClass"></SfDatePicker>
<ValidationMessage For="ValidationFor" />
@code {
    //schreibe mir eine richtige Func für die ValidationMessage damit der Parameter passt
    [Parameter]
    public Expression<Func<LocalDate>> ValidationFor { get; set; }

    public DateTime? BindValue
    {
        // schreibe den getter und setter für die BindValue Eigenschaft so das die BindValue Eigenschaft den Wert des CurrentValue Feldes zurückgibt und den Wert des CurrentValue Feldes setzt
        get => CurrentValue.ToDateTimeUnspecified();
        set => CurrentValue = value.HasValue ? LocalDate.FromDateTime(value.Value) : default;
    }

    private LocalDate CurrentValueLocalDate
    {
        get => CurrentValue;
        set
        {
            if (LocalDatePattern.Iso.Parse(value.ToString("yyyy-MM-dd", null))?.TryGetValue(default, out var result) == true)
            {
                CurrentValue = result;
            }
        }
    }

    protected override void OnParametersSet()
    {
        CurrentValueLocalDate = CurrentValue;
    }


    protected override bool TryParseValueFromString(string? value, out LocalDate result, out string? validationErrorMessage)
    {
        if (LocalDatePattern.Iso.Parse(value)?.TryGetValue(default, out var parseResult) == true)
        {
            result = parseResult;
            validationErrorMessage = null;
            return true;
        }

        result = default;
        validationErrorMessage = "Invalid date";
        return false;
    }

    protected override string FormatValueAsString(LocalDate value)
    {
        return value.ToString("yyyy-MM-dd", null);
    }

    private string ValidationClass
    {
        get
        {
            if (!EditContext.GetValidationMessages(FieldIdentifier).Any())
            {
                
            }
            
            if (ValidationFor != null && ValidationFor.Body is MemberExpression memberExpression)
            {
                var propertyName = memberExpression.Member.Name;
                var isValid = !HasValidationErrors(propertyName);
                if (isValid)
                {
                    return "e-success";
                }
                else
                {
                    return "new-error";
                }
                // return isValid ? "e-success" : "e-error";
            }
            return "e-non-edit";
        }
    }

    private bool HasValidationErrors(string propertyName)
    {
        var fieldIdentifier = FieldIdentifier.Create(ValidationFor);
        var validationMessages = EditContext.GetValidationMessages(fieldIdentifier);
        return validationMessages.Any(m => m.Contains(propertyName));
    }
}
